// Adopted from: https://github.com/sebh/UnrealEngineSkyAtmosphere
// MIT License
// Copyright (c) 2020 Epic Games, Inc.
// You can find full license texts in /licenses
#include "../_Util.glsl"
#include "Common.glsl"

layout(local_size_x = 128, local_size_y = 1) in;
const vec2 workGroupsRender = vec2(1.0, 1.0);

layout(rgba16f) restrict uniform image2D uimg_main;

uniform sampler2D usam_viewZ;
uniform sampler2D usam_transmittanceLUT;

// originView: ray origin in view space
// endView: ray end in view space
ScatteringResult computeSingleScattering(AtmosphereParameters atmosphere, vec3 originView, vec3 endView) {
    ScatteringResult result = ScatteringResult(vec3(1.0), vec3(0.0));
    RaymarchParameters params;

    mat3 vectorView2World = mat3(gbufferModelViewInverse);

    vec3 viewDirView = normalize(endView - originView);
    vec3 viewDirWorld = normalize(vectorView2World * viewDirView);

    params.origin = atmosphere_viewToAtm(atmosphere, originView);

    if (endView.z == -65536.0) {
        vec3 earthCenter = vec3(0.0, 0.0, 0.0);
        params.rayDir = viewDirWorld;

        // Check if ray origin is outside the atmosphere
        if (length(params.origin) > atmosphere.top) {
            float tTop = raySphereIntersectNearest(params.origin, params.rayDir, earthCenter, atmosphere.top);
            if (tTop < 0.0) {
                return result; // No intersection with atmosphere: stop right away
            }
            params.origin += params.rayDir * (tTop + 0.001);
        }

        float tBottom = raySphereIntersectNearest(params.origin, params.rayDir, earthCenter, atmosphere.bottom);
        float tTop = raySphereIntersectNearest(params.origin, params.rayDir, earthCenter, atmosphere.top);
        params.rayLen = 0.0;
        if (tBottom < 0.0) {
            if (tTop < 0.0) {
                return result; // No intersection with earth nor atmosphere: stop right away
            } else {
                params.rayLen = tTop;
            }
        } else {
            if (tTop > 0.0) {
                params.rayLen = min(tTop, tBottom);
            }
        }
    } else {
        vec3 endAtm = atmosphere_viewToAtm(atmosphere, endView);

        params.rayDir = normalize(endAtm - params.origin);
        params.rayLen = length(endAtm - params.origin);
    }

    vec3 sunDir = sunPosition * 0.01;
    float cosTheta = -dot(sunDir, viewDirView);
    params.cosSunZenith = dot(sunDir, upPosition * 0.01);
    params.rayleighPhaseAngular = rayleighPhaseAngular(cosTheta);
    params.miePhaseAngular = miePhaseAngular(cosTheta, atmosphere.miePhaseG);
    params.steps = 64u;

    return raymarchSingleScattering(atmosphere, params, usam_transmittanceLUT);
}

void main() {
    ivec2 imgSize = imageSize(uimg_main);
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

    if (all(lessThan(pixelPos, imgSize))) {
        vec2 texCoord = (pixelPos + 0.5) / vec2(imgSize);
        AtmosphereParameters atmosphere = getAtmosphereParameters();
        atmosphere.sunDirection = normalize(mat3(gbufferModelViewInverse) * (sunPosition * 0.01));
        float viewZ = texelFetch(usam_viewZ, pixelPos, 0).r;

        float viewZ2 = mix(viewZ, -65536.0, float(viewZ == 1.0));
        vec3 viewCoord = coords_toViewCoord(texCoord, viewZ2, gbufferProjectionInverse);

        ScatteringResult result = computeSingleScattering(atmosphere, vec3(0.0), viewCoord);

        vec4 color = imageLoad(uimg_main, pixelPos);
        color.rgb *= result.transmittance;

        vec3 sunRadiance = global_sunRadiance.rgb * global_sunRadiance.a;
        color.rgb += sunRadiance * result.inScattering;

        imageStore(uimg_main, pixelPos, color);
    }
}