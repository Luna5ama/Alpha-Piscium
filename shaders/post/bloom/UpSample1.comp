#include "UpSample.comp"
const vec2 workGroupsRender = vec2(1.0, 1.0);

uniform sampler2D usam_temp3;
layout(rgba16f) uniform restrict image2D uimg_main;

ivec2 colorTexSize = imageSize(uimg_main);
vec2 texelSize = 1.0 / vec2(colorTexSize);

int inputOffset = 0;
int outputOffset = 0;
ivec2 outputSize = colorTexSize;

ivec2 inputStartPixel = ivec2(inputOffset, 0);
ivec2 inputEndPixel = inputStartPixel + (outputSize >> 1);
vec2 inputStartTexel = (vec2(inputStartPixel) + 0.5) * texelSize;
vec2 inputEndTexel = (vec2(inputEndPixel) - 0.5) * texelSize;

ivec2 bloom_outputSize() {
    return outputSize;
}

vec4 bloom_input_up(ivec2 coord, ivec2 offset) {
    vec2 readPosUV = vec2((vec2(coord) + offset * SETTING_BLOOM_RADIUS + 0.5) * 0.5 + inputStartPixel) * texelSize;
    readPosUV = clamp(readPosUV, inputStartTexel, inputEndTexel);
    return texture(usam_temp3, readPosUV);
}

void bloom_output(ivec2 coord, vec4 data) {
    coord.x += outputOffset;
    vec4 writeData = imageLoad(uimg_main, coord);
    writeData += data * SETTING_BLOOM_INTENSITY * 0.01;
    imageStore(uimg_main, coord, writeData);
}