/*
    References:
        [JIM14] Jimenez, Jorge. "Next Generation Post Processing in Call of Duty: Advanced Warfare" SIGGRAPH 2014.
        https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/
*/
layout(local_size_x = 16, local_size_y = 16) in;
shared uvec2 shared_dataCache[35][18];

#include "Common.glsl"

#if KARIS_AVERAGE
vec4 karisAverage(vec4 sum) {
    float luma = colors_srgbLuma(sum.rgb);
    return sum / (1.0 + luma);
}
#else
vec4 karisAverage(vec4 sum) {
    return sum;
}
#endif

void computeReadPos(uint index, out ivec2 writePos, out ivec2 readPos) {
    writePos = ivec2(index % 18, index / 18);
    readPos = writePos;
    readPos.x = readPos.x << 1;
    readPos += groupBasePixel << 1;
    readPos -= 1 -(readPos.y & 1);
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

    ivec2 writePos;
    ivec2 readPos;

    computeReadPos(gl_LocalInvocationIndex, writePos, readPos);
    writeCache(writePos, bloom_input(readPos));

    computeReadPos(gl_LocalInvocationIndex + 256, writePos, readPos);
    writeCache(writePos, bloom_input(readPos));

    computeReadPos(gl_LocalInvocationIndex + 512, writePos, readPos);
    if (writePos.y < 35) {
        writeCache(writePos, bloom_input(readPos));
    }

    barrier();

    if (all(lessThan(pixelPos, bloom_outputSize()))) {
        ivec2 centerPos = ivec2(gl_LocalInvocationID.xy);
        centerPos.y = centerPos.y << 1;

        // e _ f _ g
        // _ a _ b _
        // h _ i _ j
        // _ c _ d _
        // k _ l _ m
        // a,b,c,d: 0.5 (0.125)
        // e,f,h,i: 0.125 (0.03125)
        // f,g,i,j: 0.125 (0.03125)
        // h,i,k,l: 0.125 (0.03125)
        // i,j,l,m: 0.125 (0.03125)
        vec4 e = readCache(centerPos);
        vec4 f = readCache(centerPos + ivec2(1, 0));
        vec4 g = readCache(centerPos + ivec2(2, 0));

        vec4 a = readCache(centerPos + ivec2(0, 1));
        vec4 b = readCache(centerPos + ivec2(1, 1));

        vec4 h = readCache(centerPos + ivec2(0, 2));
        vec4 i = readCache(centerPos + ivec2(1, 2));
        vec4 j = readCache(centerPos + ivec2(2, 2));

        vec4 c = readCache(centerPos + ivec2(0, 3));
        vec4 d = readCache(centerPos + ivec2(1, 3));

        vec4 k = readCache(centerPos + ivec2(0, 4));
        vec4 l = readCache(centerPos + ivec2(1, 4));
        vec4 m = readCache(centerPos + ivec2(2, 4));

        vec4 result = vec4(0.0);
        result += karisAverage(a + b + c + d) * 0.125;
        result += karisAverage(e + f + g + h) * 0.03125;
        result += karisAverage(f + g + i + j) * 0.03125;
        result += karisAverage(h + i + k + l) * 0.03125;
        result += karisAverage(i + j + l + m) * 0.03125;

        bloom_output(pixelPos, result);
    }
}