#include "DownSample.comp"
const vec2 workGroupsRender = vec2(0.0625, 0.0625);

uniform sampler2D usam_temp3;
layout(rgba16f) uniform writeonly image2D uimg_temp3;

ivec2 colorTexSize = imageSize(uimg_temp3);
vec2 texelSize = 1.0 / vec2(colorTexSize);

int inputOffset = (colorTexSize.x >> 6) * 48;
int outputOffset = (colorTexSize.x >> 6) * 56;
ivec2 inputSize = colorTexSize >> 3;

ivec2 inputStartPixel = ivec2(inputOffset, 0);
ivec2 inputEndPixel = inputStartPixel + inputSize;
vec2 inputStartTexel = (vec2(inputStartPixel) + 0.5) * texelSize;
vec2 inputEndTexel = (vec2(inputEndPixel) - 0.5) * texelSize;

ivec2 bloom_outputSize() {
    return inputSize >> 1;
}

vec4 bloom_input(ivec2 coord) {
    vec2 readPosUV = vec2(coord + inputStartPixel) * texelSize;
    readPosUV = clamp(readPosUV, inputStartTexel, inputEndTexel);
    return texture(usam_temp3, readPosUV);
}

void bloom_output(ivec2 coord, vec4 data) {
    coord.x += outputOffset;
    imageStore(uimg_temp3, coord, data);
}