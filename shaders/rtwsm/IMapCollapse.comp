#include "../_Util.glsl"

#if RTWSM_IMAP_SIZE <= 1024
#define GROUP_SIZE_X (RTWSM_IMAP_SIZE / 2)
#define SAMPLE_COUNT 1
#else
#define GROUP_SIZE_X 512
#define SAMPLE_COUNT (RTWSM_IMAP_SIZE / 1024)
#endif

layout(local_size_x = 512, local_size_y = 1, local_size_z = 1) in;
const ivec3 workGroups = ivec3(RTWSM_IMAP_SIZE, 2, 1);

layout(r32f) uniform writeonly image2D uimg_rtwsm_imap1D;
uniform sampler2D usam_rtwsm_imap2D;

shared float collapseBuffer[GROUP_SIZE_X];
shared float finalBuffer;

const vec2 TEXEL_SIZE = 1.0 / vec2(RTWSM_IMAP_SIZE);

void main() {
    uint xtIdx = gl_LocalInvocationID.x * (2 * SAMPLE_COUNT);
    uint ytIdx = gl_WorkGroupID.x;

    int f = int(gl_WorkGroupID.y);

    ivec2 coordI = ivec2(xtIdx, ytIdx) * f + ivec2(ytIdx, xtIdx) * (f ^ 1);
    vec2 coordDelta = vec2(1.0, 0.0) * f + vec2(0.0, 1.0) * (f ^ 1);
    vec2 coord = (vec2(coordI) + 0.5 + coordDelta * 0.5) * TEXEL_SIZE;

    #if SAMPLE_COUNT == 1
    collapseBuffer[gl_LocalInvocationID.x] = texture(usam_rtwsm_imap2D, coord).r;
    #else
    float value = 0.0;
    vec2 texelDelta = coordDelta * TEXEL_SIZE;
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        value = max(value, texture(usam_rtwsm_imap2D, coord + texelDelta * float(i)).r);
    }
    #endif

    barrier();

    for (uint cutoff = (GROUP_SIZE_X >> 1); cutoff > 0; cutoff >>= 1) {
        if (gl_LocalInvocationID.x < cutoff) {
            collapseBuffer[gl_LocalInvocationID.x] = max(
                    collapseBuffer[gl_LocalInvocationID.x],
                    collapseBuffer[gl_LocalInvocationID.x + cutoff]
            );
        }
        barrier();
    }

    if (gl_LocalInvocationID.x == 0) {
        imageStore(uimg_rtwsm_imap1D, ivec2(gl_WorkGroupID.x, gl_WorkGroupID.y), vec4(collapseBuffer[0], 0.0, 0.0, 0.0));
    }
}
