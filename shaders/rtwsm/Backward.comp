#if defined(MC_GL_VENDOR_NVIDIA)
#extension GL_NV_shader_subgroup_partitioned : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#else
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_clustered : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#endif

#include "../_Util.glsl"
#include "RTWSM.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
const vec2 workGroupsRender = vec2(1.0f, 1.0f);

uniform usampler2D usam_gbuffer;
uniform sampler2D usam_viewZ;

uniform sampler2D depthtex0;
uniform sampler2D shadowtex0;
uniform sampler2D usam_rtwsm_warpingMap;

layout(r32ui) uniform uimage2D uimg_rtwsm_imap2D;

void importance(ivec2 gCoord, out uint p, out float v) {
    ivec2 gbufferTextureSize = textureSize(usam_gbuffer, 0);
    if (any(greaterThanEqual(gCoord, gbufferTextureSize))) {
        p = 0xFFFFFFFFu;
        v = 0u;
        return;
    }

    vec2 texCoord = (vec2(gCoord) + 0.5) / vec2(gbufferTextureSize);
    float viewZ = texelFetch(usam_viewZ, gCoord, 0).r;
    vec3 viewCoord = coords_toViewCoord(texCoord, viewZ, gbufferProjectionInverse);
    vec3 worldCoord = (gbufferModelViewInverse * vec4(viewCoord, 1.0)).xyz;

    GBufferData gData;
    gbuffer_unpack(texelFetch(usam_gbuffer, gCoord, 0), gData);

    vec3 viewDir = normalize(-viewCoord);

    vec4 shadowCS = global_shadowRotationMatrix * shadowProjection * shadowModelView * vec4(worldCoord, 1.0);
    shadowCS /= shadowCS.w;
    vec2 shadowTS = shadowCS.xy * 0.5 + 0.5;

    float importance = 1.0;

    // Distance function
    #if SETTING_RTWSM_IMP_D > 0.0
    importance *= (SETTING_RTWSM_IMP_D) / (SETTING_RTWSM_IMP_D + dot(viewCoord, viewCoord));
    #endif

    // Surface normal function
    #if SETTING_RTWSM_IMP_SN > 0.0
    importance *= 1.0 + SETTING_RTWSM_IMP_SN * max(dot(gData.normal, viewDir), 0.0);
    #endif

//    const float LSN_BETA = 1.0;
//    importance *= 1.0 + LSN_BETA * sqrt(pDist) * pow(1.0 - abs(dot(normalMatrix * worldNormal, shadowLightPosition)), 8.0);

    // Shadow Edge function
    #if SETTING_RTWSM_IMP_SE < 1.0
    vec2 shadowTSWarped = rtwsm_warpTexCoord(usam_rtwsm_warpingMap, shadowTS);

    float center = texture(shadowtex0, shadowTSWarped).x;
    float maxDiff = 0.0;
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(-1, -1)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(-1, 0)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(-1, 1)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(0, -1)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(0, 1)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(1, -1)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(1, 0)).x));
    maxDiff = max(maxDiff, abs(center - textureOffset(shadowtex0, shadowTSWarped, ivec2(1, 1)).x));
    maxDiff *= far - near;

    importance *= mix(SETTING_RTWSM_IMP_SE, 1.0, smoothstep(0.5, 2.0, maxDiff));
    #endif

    if (shadowCS.x < -1.0 || shadowCS.x > 1.0 || shadowCS.y < -1.0 || shadowCS.y > 1.0 || shadowCS.z < -1.0 || shadowCS.z > 1.0) {
        p = 0xFFFFFFFFu;
        v = 0u;
        return;
    }

    uvec2 shadowPos = uvec2(shadowTS.xy * SETTING_RTWSM_IMAP_SIZE + 0.5);

    p = shadowPos.y << 16 | shadowPos.x;
    v = importance;

    return;
}

const float IMPORTANCE_MUL = uintBitsToFloat(0x4F800000u);

void writeOutput(uint p, float v) {
    if (p == 0xFFFFFFFFu) return;
    imageAtomicMax(uimg_rtwsm_imap2D, ivec2(p & 0xFFFFu, p >> 16), uint(v * IMPORTANCE_MUL));
}

void main() {
    uint p;
    float v;
    importance(ivec2(gl_GlobalInvocationID.xy), p, v);

    #ifdef MC_GL_VENDOR_NVIDIA
    uvec4 pballot = subgroupPartitionNV(p);
    if (subgroupBallotFindLSB(pballot) == gl_SubgroupInvocationID) {
        writeOutput(p, subgroupPartitionedMaxNV(v, pballot));
    }
    #else
    if (p == 0xFFFFFFFFu) {
        p = subgroupMin(p);
    }
    if (subgroupAllEqual(p)) {
        if (gl_SubgroupInvocationID == 0) {
            writeOutput(p, subgroupMax(v));
        }
        return;
    }

    #define CLUSTERED_DEDUP(n) if (subgroupClusteredXor(p, n) != 0) { writeOutput(p, v); return; } if ((gl_SubgroupInvocationID & (n - 1u)) != 0u) return; v = subgroupClusteredMax(v, n);

    CLUSTERED_DEDUP(2u)
    CLUSTERED_DEDUP(4u)
    CLUSTERED_DEDUP(8u)
    CLUSTERED_DEDUP(16u)
    writeOutput(p, v);

    #endif
}
