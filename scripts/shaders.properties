underwaterOverlay=false

particles.before.deferred=true
shadow.culling = false
allowConcurrentCompute = true

iris.features.required = SSBO CUSTOM_IMAGES SEPARATE_HARDWARE_SAMPLERS

bufferObject.0 = 16384

#if SETTING_RTWSM_IMAP_SIZE == 256
#define IMAP_Y_SIZE 262
#elif SETTING_RTWSM_IMAP_SIZE == 512
#define IMAP_Y_SIZE 518
#elif SETTING_RTWSM_IMAP_SIZE == 1024
#define IMAP_Y_SIZE 1030
#endif
image.uimg_rtwsm_imap = usam_rtwsm_imap RED R32F FLOAT false false SETTING_RTWSM_IMAP_SIZE IMAP_Y_SIZE
image.uimg_transmittanceLUT = usam_transmittanceLUT RGBA RGBA16F FLOAT false false 256 64
image.uimg_multiSctrLUT = usam_multiSctrLUT RGBA RGBA16F FLOAT false false 32 32
image.uimg_skyLUT = usam_skyLUT RGBA RGBA16F FLOAT false false 128 128
image.uimg_epipolarSliceEnd = usam_epipolarSliceEnd RGBA RGBA32F FLOAT true false SETTING_EPIPOLAR_SLICES 1
image.uimg_epipolarData = usam_epipolarData RGBA_INTEGER RGBA32UI UNSIGNED_INT false false SETTING_EPIPOLAR_SLICES SETTING_SLICE_SAMPLES
image.uimg_prevNZ = usam_prevNZ RG_INTEGER RG32UI UNSIGNED_INT false true 1.0 1.0
image.uimg_svgfHistory = usam_svgfHistory RGBA_INTEGER RGBA32UI UNSIGNED_INT false true 1.0 1.0
image.uimg_envProbe = usam_envProbe RGBA_INTEGER RGBA32UI UNSIGNED_INT false false 1024 512

program.composite2.enabled = SETTING_SHADOW_HALF_RES
program.composite12.enabled = SETTING_DENOISER
program.composite13.enabled = SETTING_DENOISER
program.composite14.enabled = SETTING_DENOISER
program.composite15.enabled = SETTING_DENOISER
program.composite16.enabled = SETTING_DENOISER
program.composite17.enabled = SETTING_DENOISER

program.composite40.enabled = SETTING_BLOOM
program.composite41.enabled = SETTING_BLOOM
program.composite42.enabled = SETTING_BLOOM
program.composite43.enabled = SETTING_BLOOM
program.composite44.enabled = SETTING_BLOOM
program.composite45.enabled = SETTING_BLOOM
program.composite46.enabled = SETTING_BLOOM
program.composite47.enabled = SETTING_BLOOM
program.composite48.enabled = SETTING_BLOOM
program.composite49.enabled = SETTING_BLOOM
program.composite50.enabled = SETTING_BLOOM
program.composite51.enabled = SETTING_BLOOM
program.composite52.enabled = SETTING_BLOOM
program.composite53.enabled = SETTING_RTWSM_B

#if SETTING_DEBUG_OUTPUT == 3
program.composite75.enabled = true
#else
program.composite75.enabled = false
#endif

program.composite80.enabled = SETTING_DEBUG_EPIPOLAR
flip.composite80.colortex0 = false
program.composite81.enabled = SETTING_DEBUG_EPIPOLAR
flip.composite81.colortex0 = false
program.composite82.enabled = SETTING_DEBUG_EPIPOLAR
flip.composite82.colortex0 = false
program.composite83.enabled = SETTING_DEBUG_EPIPOLAR

blend.shadow.colortex0=SRC_ALPHA SRC_COLOR ONE ZERO

blend.gbuffers_armor_glint.colortex5=ONE ONE ZERO ONE
blend.gbuffers_armor_glint.colortex8=off
blend.gbuffers_armor_glint.colortex9=off
blend.gbuffers_entities.colortex8=off
blend.gbuffers_entities.colortex9=off
blend.gbuffers_block.colortex8=off
blend.gbuffers_block.colortex9=off
blend.gbuffers_particles.colortex8=off
blend.gbuffers_particles.colortex9=off
blend.gbuffers_hand=off

blend.gbuffers_hand_water=SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE
blend.gbuffers_water=SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE_MINUS_DST_ALPHA ONE

uniform.float.uval_sunRadius = 695700 * SETTING_SUN_RADIUS
uniform.float.uval_sunDistance = 149600000 * SETTING_SUN_DISTANCE
uniform.float.uval_sunAngularRadius = asin(uval_sunRadius / uval_sunDistance)
uniform.float.uval_sunOmega = pow(uval_sunRadius / uval_sunDistance, 2.0)
uniform.vec2.uval_rtwsmMin = vec2(exp2(SETTING_RTWSM_F_MIN), exp2(SETTING_RTWSM_B_MIN))

variable.float.sunLength = sqrt(sunPosition.x * sunPosition.x + sunPosition.y * sunPosition.y + sunPosition.z * sunPosition.z)
uniform.vec3.uval_sunDirView = sunPosition / vec3(sunLength, sunLength, sunLength)
variable.vec3.sunDirWorldTemp = vec3(gbufferModelViewInverse.0.0 * uval_sunDirView.x + gbufferModelViewInverse.1.0 * uval_sunDirView.y + gbufferModelViewInverse.2.0 * uval_sunDirView.z, \
    gbufferModelViewInverse.0.1 * uval_sunDirView.x + gbufferModelViewInverse.1.1 * uval_sunDirView.y + gbufferModelViewInverse.2.1 * uval_sunDirView.z, \
    gbufferModelViewInverse.0.2 * uval_sunDirView.x + gbufferModelViewInverse.1.2 * uval_sunDirView.y + gbufferModelViewInverse.2.2 * uval_sunDirView.z)
variable.float.sunDirWorldLength = sqrt(sunDirWorldTemp.x * sunDirWorldTemp.x + sunDirWorldTemp.y * sunDirWorldTemp.y + sunDirWorldTemp.z * sunDirWorldTemp.z)
uniform.vec3.uval_sunDirWorld = sunDirWorldTemp / vec3(sunDirWorldLength, sunDirWorldLength, sunDirWorldLength)

variable.float.moonLength = sqrt(moonPosition.x * moonPosition.x + moonPosition.y * moonPosition.y + moonPosition.z * moonPosition.z)
uniform.vec3.uval_moonDirView = moonPosition / vec3(moonLength, moonLength, moonLength)
variable.vec3.moonDirWorldTemp = vec3(gbufferModelViewInverse.0.0 * uval_moonDirView.x + gbufferModelViewInverse.1.0 * uval_moonDirView.y + gbufferModelViewInverse.2.0 * uval_moonDirView.z, \
    gbufferModelViewInverse.0.1 * uval_moonDirView.x + gbufferModelViewInverse.1.1 * uval_moonDirView.y + gbufferModelViewInverse.2.1 * uval_moonDirView.z, \
    gbufferModelViewInverse.0.2 * uval_moonDirView.x + gbufferModelViewInverse.1.2 * uval_moonDirView.y + gbufferModelViewInverse.2.2 * uval_moonDirView.z)
variable.float.moonDirWorldLength = sqrt(moonDirWorldTemp.x * moonDirWorldTemp.x + moonDirWorldTemp.y * moonDirWorldTemp.y + moonDirWorldTemp.z * moonDirWorldTemp.z)
uniform.vec3.uval_moonDirWorld = moonDirWorldTemp / vec3(moonDirWorldLength, moonDirWorldLength, moonDirWorldLength)

variable.float.shadowLightLength = sqrt(shadowLightPosition.x * shadowLightPosition.x + shadowLightPosition.y * shadowLightPosition.y + shadowLightPosition.z * shadowLightPosition.z)
uniform.vec3.uval_shadowLightDirView = shadowLightPosition / vec3(shadowLightLength, shadowLightLength, shadowLightLength)
variable.vec3.shadowLightDirWorldTemp = vec3(gbufferModelViewInverse.0.0 * uval_shadowLightDirView.x + gbufferModelViewInverse.1.0 * uval_shadowLightDirView.y + gbufferModelViewInverse.2.0 * uval_shadowLightDirView.z, \
    gbufferModelViewInverse.0.1 * uval_shadowLightDirView.x + gbufferModelViewInverse.1.1 * uval_shadowLightDirView.y + gbufferModelViewInverse.2.1 * uval_shadowLightDirView.z, \
    gbufferModelViewInverse.0.2 * uval_shadowLightDirView.x + gbufferModelViewInverse.1.2 * uval_shadowLightDirView.y + gbufferModelViewInverse.2.2 * uval_shadowLightDirView.z)
variable.float.shadowLightDirWorldLength = sqrt(shadowLightDirWorldTemp.x * shadowLightDirWorldTemp.x + shadowLightDirWorldTemp.y * shadowLightDirWorldTemp.y + shadowLightDirWorldTemp.z * shadowLightDirWorldTemp.z)
uniform.vec3.uval_shadowLightDirWorld = shadowLightDirWorldTemp / vec3(shadowLightDirWorldLength, shadowLightDirWorldLength, shadowLightDirWorldLength)

variable.float.upLength = sqrt(upPosition.x * upPosition.x + upPosition.y * upPosition.y + upPosition.z * upPosition.z)
uniform.vec3.uval_upDirView = upPosition / vec3(upLength, upLength, upLength)

variable.vec4.sunClipPos = vec4(gbufferProjection.0.0 * uval_sunDirView.x + gbufferProjection.1.0 * uval_sunDirView.y + gbufferProjection.2.0 * uval_sunDirView.z + gbufferProjection.3.0, \
    gbufferProjection.0.1 * uval_sunDirView.x + gbufferProjection.1.1 * uval_sunDirView.y + gbufferProjection.2.1 * uval_sunDirView.z + gbufferProjection.3.1, \
    gbufferProjection.0.2 * uval_sunDirView.x + gbufferProjection.1.2 * uval_sunDirView.y + gbufferProjection.2.2 * uval_sunDirView.z + gbufferProjection.3.2, \
    gbufferProjection.0.3 * uval_sunDirView.x + gbufferProjection.1.3 * uval_sunDirView.y + gbufferProjection.2.3 * uval_sunDirView.z + gbufferProjection.3.3)
uniform.bool.uval_sunVisible = sunClipPos.w > 0.0 && abs(sunClipPos.x) < sunClipPos.w && abs(sunClipPos.y) < sunClipPos.w && abs(sunClipPos.z) < sunClipPos.w
variable.vec2.sunNdcPos = vec2(sunClipPos.x / sunClipPos.w, sunClipPos.y / sunClipPos.w)
variable.float.sunNdcDist = sqrt(sunNdcPos.x * sunNdcPos.x + sunNdcPos.y * sunNdcPos.y)
uniform.vec2.uval_sunNdcPos = vec2(if(sunNdcDist > 100.0, sunNdcPos.x * (100.0 / sunNdcDist), sunNdcPos.x), if(sunNdcDist > 100.0, sunNdcPos.y * (100.0 / sunNdcDist), sunNdcPos.y))
variable.vec4.moonClipPos = vec4(gbufferProjection.0.0 * uval_moonDirView.x + gbufferProjection.1.0 * uval_moonDirView.y + gbufferProjection.2.0 * uval_moonDirView.z + gbufferProjection.3.0, \
    gbufferProjection.0.1 * uval_moonDirView.x + gbufferProjection.1.1 * uval_moonDirView.y + gbufferProjection.2.1 * uval_moonDirView.z + gbufferProjection.3.1, \
    gbufferProjection.0.2 * uval_moonDirView.x + gbufferProjection.1.2 * uval_moonDirView.y + gbufferProjection.2.2 * uval_moonDirView.z + gbufferProjection.3.2, \
    gbufferProjection.0.3 * uval_moonDirView.x + gbufferProjection.1.3 * uval_moonDirView.y + gbufferProjection.2.3 * uval_moonDirView.z + gbufferProjection.3.3)
uniform.bool.uval_moonVisible = moonClipPos.w > 0.0 && abs(moonClipPos.x) < moonClipPos.w && abs(moonClipPos.y) < moonClipPos.w && abs(moonClipPos.z) < moonClipPos.w
variable.vec2.moonNdcPos = vec2(moonClipPos.x / moonClipPos.w, moonClipPos.y / moonClipPos.w)
variable.float.moonNdcDist = sqrt(moonNdcPos.x * moonNdcPos.x + moonNdcPos.y * moonNdcPos.y)
uniform.vec2.uval_moonNdcPos = vec2(if(moonNdcDist > 100.0, moonNdcPos.x * (100.0 / moonNdcDist), moonNdcPos.x), if(moonNdcDist > 100.0, moonNdcPos.y * (100.0 / moonNdcDist), moonNdcPos.y))